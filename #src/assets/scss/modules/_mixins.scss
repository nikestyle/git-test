//<MIXINS>
$Width: 1920;
@mixin adaptiv-font($pcSize, $mobSize) {
   $addSize: $pcSize - $mobSize;
   $Width: $Width - 320;
   font-size: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$Width}));
}
$Width1530: 1530;
@mixin adaptiv-font-1530($pcSize, $mobSize) {
   $addSize: $pcSize - $mobSize;
   $Width1530: $Width1530 - 320;
   font-size: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$Width1530}));
}

@mixin text-clamp($numLines: 1) {
   white-space: nowrap;
   text-overflow: ellipsis;
   overflow: hidden;

   @supports (-webkit-line-clamp: $numLines) {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: initial;
      display: -webkit-box;
      -webkit-line-clamp: $numLines;
      -webkit-box-orient: vertical;
   }
}

@mixin pseudo($display: block, $pos: absolute, $content: "") {
   content: $content;
   display: $display;
   position: $pos;
}

@mixin triangle($color: $black, $direction: bottom, $size: 6px, $round: false, $roundSize: 3px, $position: absolute) {
   @include pseudo($pos: $position);
   width: 0;
   height: 0;
   @if $round {
      border-radius: $roundSize;
   }
   @if $direction == bottom {
      border-left: $size solid transparent;
      border-right: $size solid transparent;
      border-top: $size solid $color;
      margin-top: 0 - calc($size / 2.5);
   } @else if $direction == top {
      border-left: $size solid transparent;
      border-right: $size solid transparent;
      border-bottom: $size solid $color;
      margin-bottom: 0 - calc($size / 2.5);
   } @else if $direction == right {
      border-top: $size solid transparent;
      border-bottom: $size solid transparent;
      border-left: $size solid $color;
      margin-right: -$size;
   } @else if $direction == left {
      border-top: $size solid transparent;
      border-bottom: $size solid transparent;
      border-right: $size solid $color;
      margin-left: -$size;
   }
}

@mixin gradient($start-color, $end-color, $orientation) {
   background: $start-color;

   @if $orientation == "vertical" {
      background: -webkit-linear-gradient(top, $start-color, $end-color);
      background: linear-gradient(to bottom, $start-color, $end-color);
   } @else if $orientation == "horizontal" {
      background: -webkit-linear-gradient(left, $start-color, $end-color);
      background: linear-gradient(to right, $start-color, $end-color);
   } @else {
      background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
      background: radial-gradient(ellipse at center, $start-color, $end-color);
   }
}

@mixin fade($type) {
   @if $type== "hide" {
      visibility: hidden;
      opacity: 0;
      transition: all 0.3s ease 0s;
   } @else if $type== "show" {
      visibility: visible;
      opacity: 1;
      transition: all 0.3s ease 0s;
   }
}

@mixin anim($time, $delay) {
   -webkit-transition: all $time ease $delay;
   -moz-transition: all $time ease $delay;
   -ms-transition: all $time ease $delay;
   -o-transition: all $time ease $delay;
   transition: all $time ease $delay;
}
@mixin anim_cubic($time, $delay) {
   -webkit-transition: all $time cubic-bezier(0.68, -0.55, 0.265, 1.55) $delay;
   -moz-transition: all $time cubic-bezier(0.68, -0.55, 0.265, 1.55) $delay;
   -ms-transition: all $time cubic-bezier(0.68, -0.55, 0.265, 1.55) $delay;
   -o-transition: all $time cubic-bezier(0.68, -0.55, 0.265, 1.55) $delay;
   transition: all $time cubic-bezier(0.68, -0.55, 0.265, 1.55) $delay;
}
@mixin animate($name, $time, $infinite, $type) {
   -webkit-animation: $name $time + s $infinite $type;
   -moz-animation: $name $time + s $infinite $type;
   -o-animation: $name $time + s $infinite $type;
   animation: $name $time + s $infinite $type;
}
@mixin rotate($deg) {
   -moz-transform: rotate($deg);
   -ms-transform: rotate($deg);
   -webkit-transform: rotate($deg);
   -o-transform: rotate($deg);
   transform: rotate($deg);
}
@mixin scale($num) {
   -moz-transform: scale($num);
   -ms-transform: scale($num);
   -webkit-transform: scale($num);
   -o-transform: scale($num);
   transform: scale($num);
}
@mixin skew($num) {
   -webkit-transform: skewX($num);
   -moz-transform: skewX($num);
   -ms-transform: skewX($num);
   -o-transform: skewX($num);
   transform: skewX($num);
}
@mixin cnt($h) {
   display: flex;
   flex-direction: column;
   height: $h;
   text-align: center;
   align-items: stretch;
   justify-content: center;
}
@mixin tr($x, $y, $z) {
   transform: translate3d($x, $y, $z);
   -webkit-transform: translate3d($x, $y, $z);
   -ms-transform: translate3d($x, $y, $z);
   -o-transform: translate3d($x, $y, $z);
   -moz-transform: translate3d($x, $y, $z);
}
@mixin flexbox() {
   display: -webkit-box;
   display: -moz-box;
   display: -ms-flexbox;
   display: -webkit-flex;
   display: flex;
   // font-size: 0;
}
@mixin flexboxinline() {
   display: -webkit-inline-flex;
   display: -moz-inline-flex;
   display: -ms-inline-flex;
   display: -o-inline-flex;
   display: inline-flex;
}
@mixin flexorder($val) {
   -webkit-box-ordinal-group: $val;
   -moz-box-ordinal-group: $val;
   -ms-flex-order: $val;
   -webkit-order: $val;
   border: $val;
}

//</MIXINS>
